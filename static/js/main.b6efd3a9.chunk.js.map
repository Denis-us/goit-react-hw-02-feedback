{"version":3,"sources":["components/Statistics/Statistics.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","Notification","message","App","state","setState","prevState","totalFeedback","Object","values","reduce","a","b","PositiveFeedbackPercentage","positiveFeedback","countTotalFeedback","this","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAGMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CAEA,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KAEV,yCAAYC,KACZ,qDAAwBC,EAAxB,WAKNL,EAAWM,aAAe,CACxBF,MAAO,GACPC,mBAAoB,IASPL,QClBAO,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACGD,GAAS,6BAAKA,IACdC,MCaQC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAqBC,QAAS,kBAAMH,EAAgBE,IAApD,SACGA,GADUA,SCINE,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCuDEC,E,4MApDbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPS,gBAAkB,SAACE,GACjB,EAAKM,UAAS,SAACC,GAAD,sBACXP,EAASO,EAAUP,GAAU,O,EAIlCQ,cAAgB,kBAAMC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,M,EAErEC,2BAA6B,WAC3B,IAAMC,EAAmB,EAAKV,MAAMlB,KAGpC,OAAQ4B,GAAoBA,GAFH,EAAKV,MAAMjB,QAAU,EAAKiB,MAAMhB,MAEW,K,4CAGtE,WACE,IAAM2B,EAAqBC,KAAKT,gBAC1BU,EAAkCD,KAAKH,6BAE7C,OACE,qCACE,cAAC,EAAD,CAASpB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBmB,KAAKnB,oBAI1B,cAAC,EAAD,CAASJ,MAAO,aAAhB,SACGsB,EAAqB,EACpB,cAAC,EAAD,CAAcb,QAAS,sBAEvB,cAAC,EAAD,CACEhB,KAAM8B,KAAKZ,MAAMlB,KACjBC,QAAS6B,KAAKZ,MAAMjB,QACpBC,IAAK4B,KAAKZ,MAAMhB,IAChBC,MAAO0B,EACPzB,mBAAoB2B,a,GA5ChBC,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b6efd3a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <ul>Statistics</ul>\r\n\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  total: \"\",\r\n  positivePercentage: \"\",\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul>\n      {options.map((option) => (\n        <button key={option} onClick={() => onLeaveFeedback(option)}>\n          {option}\n        </button>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.string.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (option) => {\n    this.setState((prevState) => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  totalFeedback = () => Object.values(this.state).reduce((a, b) => a + b);\n\n  PositiveFeedbackPercentage = () => {\n    const positiveFeedback = this.state.good;\n    const negativeFeedback = this.state.neutral + this.state.bad;\n\n    return (positiveFeedback / (positiveFeedback + negativeFeedback)) * 100;\n  };\n\n  render() {\n    const countTotalFeedback = this.totalFeedback();\n    const countPositiveFeedbackPercentage = this.PositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title={\"Statistics\"}>\n          {countTotalFeedback < 1 ? (\n            <Notification message={\"No feedback given\"}></Notification>\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={countTotalFeedback}\n              positivePercentage={countPositiveFeedbackPercentage}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import \"./index.css\";\r\nimport App from \"./App\";\r\n// import 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}